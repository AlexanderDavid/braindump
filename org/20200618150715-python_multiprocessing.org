#+setupfile:./hugo_setup.org
#+title: Python Multiprocessing
#+roam_tags: Python

- tags :: [[file:20200618150702-python.org][Python]]

* [[https://docs.python.org/3/library/concurrent.futures.html][Concurrent Futures]]
High level wrapper for async execution of callables. The basic idea is that execution is passed to either threads (with ~ThreadPoolExecutor~) or processes (with ~ProcessPollExecutor~). Both of them expose the same methods and inheret from the abstract ~Executor~ class.

To submit a single fuction for async work:
#+BEGIN_SRC python :results output
from concurrent.futures import ThreadPoolExecutor

with ThreadPoolExecutor(max_workers=1) as executor:
    future = executor.submit(pow, 2, 5)
    print(future.result())
#+END_SRC

#+RESULTS:
: 32

Can also map a single function over a list of iterables:
#+BEGIN_SRC python :results output
from concurrent.futures import ThreadPoolExecutor
from math import exp

with ThreadPoolExecutor(max_workers=3) as executor:
    results = executor.map(exp, [1, 2, 3])

for result in results:
    print(result)
#+END_SRC

#+RESULTS:
: 2.718281828459045
: 7.38905609893065
: 20.085536923187668
